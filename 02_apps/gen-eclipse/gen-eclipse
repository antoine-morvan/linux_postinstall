#!/bin/bash -eu

ECHOPREFIX="[GENECLIPSE]"

echo "${ECHOPREFIX} starting setup ..."

####################################################################
##	Setup Script
####################################################################
#
# Helper script to setup a proper Eclipse environment. Setups  
# Eclipse in the given folder, initializes the workspace with few 
# parameters, fix GTK2 startup, and install plugins. 
#
####################################################################
[ $# -lt 1 ] && ARG1="" || ARG1=$1

##################################
##	Eclipse configuration
##################################

# MIRROR List :
#http://ftp.fau.de/eclipse/
#http://mirror.ibcp.fr/pub/eclipse/
#http://ftp.halifax.rwth-aachen.de/eclipse/
#http://eclipse.mirror.wearetriple.com/
#http://artfiles.org/eclipse.org/
#http://mirror.switch.ch/eclipse/

MIRRORURL="http://mirror.ibcp.fr/pub/eclipse/"

ECLIPSE_VERSION=photon
ECLIPSE_VERSION_MAJOR=4
ECLIPSE_VERSION_MIDDLE=8
ECLIPSE_VERSION_MINOR=
# to find the timestamp check ${MIRRORURL}/eclipse/downloads/drops${ECLIPSE_VERSION_MAJOR}/
# i.e. http://ftp.fau.de/eclipse//eclipse/downloads/drops4/
ECLIPSE_TIMESTAMP=201806110500
ECLIPSE_PRE=${ECLIPSE_VERSION_MINOR}


DARKTHEME=NO

#useful plugins
SETUP_SVN=YES 	# SVN Client
SETUP_EASYSHELL=YES		# External Terminal
SETUP_ANYEDITTOOLS=YES  # UI enhancement
SETUP_FINDBUGS=YES		# More error/warnings

SETUP_GRADLE=YES		# Web Tool Plugins
SETUP_ECLEMMAJCC=YES	# Java Code Coverage
SETUP_JAUTODOC=YES		# Java AutoDoc

SETUP_WTP=YES			# Web Tool Plugins
SETUP_JAVAFX=YES		# JavaFX Design Tools
SETUP_PHOTRAN=YES		# Fortran support (from PTP)
SETUP_DLTK=YES			# Dynamic Languages Toolkit

#specific plugins (deprecated)
SETUP_TEXCLIPSE=YES 	# latex support in eclipse

#causing annoying behavior
SETUP_EASE=NO			# Eclipse Advanced Scripting Environment

#failing ..
SETUP_PTP=NO			# Parallel Tools
SETUP_CUP_LEX=NO   		#cup & lex (similar to yacc & lex, but in java)
SETUP_TOMCAT=NO			# Tomcat plugin
SETUP_GRECLIPSE=NO 		#groovy for eclipse

#CAIRN plugins (deprecated)
SETUP_TOM=NO
SETUP_JNIMAP=NO
SETUP_GECOS_SCRIPT=NO
SETUP_GECOS_UI=NO

##################################
##	Setup functions
##################################

function check_and_set_eclipse_mirror {
  ECLIPSE_VERSION_ALL=${ECLIPSE_VERSION_MAJOR}.${ECLIPSE_VERSION_MIDDLE}
  if [ "${ECLIPSE_PRE}" != "" ]; then 
    ECLIPSE_VERSION_ALL=${ECLIPSE_VERSION_MAJOR}.${ECLIPSE_VERSION_MIDDLE}.${ECLIPSE_PRE}
  fi
	ECLIPSE_URL_PATH="eclipse/downloads/drops${ECLIPSE_VERSION_MAJOR}/R-${ECLIPSE_VERSION_ALL}-${ECLIPSE_TIMESTAMP}/"
	ECLIPSE_ARCHIVE_NAME="eclipse-platform-${ECLIPSE_VERSION_ALL}-${ECLIPSE_PLATFORM}${ECLIPSE_ARCHSUFF}.${ARCHIVE_EXTENSION}"
  URL="${MIRRORURL}${ECLIPSE_URL_PATH}${ECLIPSE_ARCHIVE_NAME}"
}

function check_java_version {
	JAVA8=0
	JAVA9=0
	JAVA10=0
	JAVA8=`java -version 2>&1 | grep 1.8 | wc -l`
	if [ "$JAVA8" == "0" ]; then
		JAVA9=`java -version 2>&1 | grep 1.9 | wc -l`
		if [ "$JAVA9" == "0" ]; then
			JAVA10=`java -version 2>&1 | grep "10\." | wc -l`
			if [ "$JAVA10" == "0" ]; then
				cat << "EOF"

Eclipse requires Java 8 or higher. On debian like systems (as root) :
   $ apt-get install openjdk-8-jdk openjdk-8-source
   $ JVM=`update-java-alternatives -l | grep 1.8 | cut -d" " -f 1 | head -n 1` 
   $ update-java-alternatives -s $JVM
On other Linux distributions, Windows and MacOSX systems, please
visit http://www.oracle.com/technetwork/java/javase/downloads/index.html

EOF
				exit 1
			fi
		fi
	fi
}

function check_user {	
	USER=`whoami`
  [ "$USER" == "root" ] && echo "Should not be run as root" && exit 1 || true
  return
}

function check_homedir {	
	HOMEDIR=$HOME
	[ ! -d ${HOMEDIR} ] && HOMEDIR=`cat /etc/passwd | grep "$USER" | cut -d":" -f 6` || true
	[ ! -d ${HOMEDIR} ] && echo "Could not locate Home directory (${HOMEDIR})" && exit 1 || true
}

function check_and_set_installation_path {
  [ $# -lt 1 ] && ARG1="" || ARG1=$1
	installationpath="$ARG1"
	[ "$ARG1" == "" ] && read -p "Folder installation path: " installationpath
	if [ -d "${installationpath}" ]; then
		if [ -d "${installationpath}/eclipse" ]; then
			echo "Error: eclipse folder already exist at the location specified"
			exit 1
		fi
		if [ -d "${installationpath}/workspace" ]; then
			echo "Error: workspace folder already exist at the location specified"
			exit 1
		fi
	else
		mkdir -p ${installationpath}
	fi

	installationpath=`(cd ${installationpath} && echo $PWD)`
	#test write permission
	[ ! -w ${installationpath} ] && echo "Cannot write into ${installationpath}" && exit 1 || true
}

function check_and_set_platform {
	# Supported platforms
	#   - Windows
	#   - Windows (x86_64)
	#   - Linux (x86/GTK+)
	#   - Linux (x86_64/GTK+)
	#   - Mac OSX (Mac/Cocoa/x86_64)

	PLATFORM=`uname -s`
	ARCH=`uname -m`

	ECLIPSE_ARCHSUFF=
	[ "${ARCH}" == "x86_64" ] && ECLIPSE_ARCHSUFF=-x86_64 || true

  echo "${ECHOPREFIX}    * Set eclipse platform"
	case $PLATFORM in
		Linux)
			ECLIPSE_PLATFORM=linux-gtk
			ARCHIVE_EXTENSION=tar.gz
			
			ECLIPSE_INIT_FOLDER="eclipse/"
			ECLIPSE_BIN_FOLDER="eclipse/"
			ECLIPSE_BIN_EXTENSTION=
			;;
		Darwin)
			ECLIPSE_PLATFORM=macosx-cocoa
			ARCHIVE_EXTENSION=tar.gz
			
			ECLIPSE_INIT_FOLDER="Eclipse.app/Contents/Eclipse/"
			ECLIPSE_BIN_FOLDER="Eclipse.app/Contents/MacOS/"
			ECLIPSE_BIN_EXTENSTION=
			;;
		CYGWIN_NT-6.1 | CYGWIN_NT-10.0)
			ECLIPSE_PLATFORM=win32
			ARCHIVE_EXTENSION=zip
			
			ECLIPSE_INIT_FOLDER="eclipse/"
			ECLIPSE_BIN_FOLDER="eclipse/"
			ECLIPSE_BIN_EXTENSTION="c.exe"
			;;
		*)
			echo "Unsupported platform $PLATFORM."
			exit 1
			;;
	esac
  echo "${ECHOPREFIX}    * Set archive extension"
	case ${ARCHIVE_EXTENSION} in
		tar.gz)
			which tar 2>&1 > /dev/null
			TARPRESENT=$?
			[ "$TARPRESENT" != 0 ] && echo "Could not locate tar" && exit 1
			;;
		zip)
			which unzip 2>&1 > /dev/null
			UNZIPPRESENT=$?
			[ "$UNZIPPRESENT" != 0 ] && echo "Could not locate unzip" && exit 1
			;;
		*)
			echo "error"
			exit 1
			;;
	esac
  echo "${ECHOPREFIX}    * Platform set"
  return
}

function check_and_set_download_tool {
  set +e
	which wget 2>&1 > /dev/null
	WGETPRESENT=$?
	which curl 2>&1 > /dev/null
	CURLPRESENT=$?
	set -e
	if [ "$CURLPRESENT" == "0" ]; then
		DOWNLOADTOOL=curl
		DOWNLOADOPTION="-o"
	else 
		if [ "$WGETPRESENT" == 0 ]; then
			DOWNLOADTOOL=wget
			DOWNLOADOPTION="-O"
		else
			echo "Could not locate download tools (WGet or CURL)."
			exit 1
		fi
	fi
}

##################################
##	Check script configuration
##################################
echo "${ECHOPREFIX} Check script configuration"
{
  echo "${ECHOPREFIX}  * Check user"
	check_user
  echo "${ECHOPREFIX}  * Check homedir"
	check_homedir
  echo "${ECHOPREFIX}  * Check java version"
	check_java_version

  echo "${ECHOPREFIX}  * Check install path"
	check_and_set_installation_path $ARG1
  echo "${ECHOPREFIX}  * Check platform"
	check_and_set_platform
  echo "${ECHOPREFIX}  * Check download tool"
	check_and_set_download_tool
  echo "${ECHOPREFIX}  * Check mirror"
	check_and_set_eclipse_mirror

	echo "${ECHOPREFIX} "
	echo "${ECHOPREFIX} Installing in ${installationpath}"
	echo "${ECHOPREFIX} Archive name : ${ECLIPSE_ARCHIVE_NAME}"
	echo "${ECHOPREFIX} URL = $URL"
	echo "${ECHOPREFIX} "
}

##################################
##	Setup Eclipse
##################################
echo "${ECHOPREFIX} Setup Eclipse"
{
	TMPFILE=$(mktemp tmp_XXXXXXX_${ECLIPSE_ARCHIVE_NAME})
	echo "${ECHOPREFIX} ${DOWNLOADTOOL} ${DOWNLOADOPTION} ${TMPFILE} ${URL}"
	${DOWNLOADTOOL} ${DOWNLOADOPTION} ${TMPFILE} ${URL}
	echo "${ECHOPREFIX} Extracting ..."
	case ${ARCHIVE_EXTENSION} in
		tar.gz)
			tar -xf ${TMPFILE} -C ${installationpath}
			;;
		zip)
			unzip -xq ${TMPFILE} -d ${installationpath}
			;;
		*)
			echo "Unsupported archive extension"
			exit 1
			;;
	esac
	rm ${TMPFILE}
	chmod -R +rwx ${installationpath}
	
	echo "${ECHOPREFIX} Setup done."
}

##################################
##	Config Eclipse
##################################
WORKSPACE_PATH=${installationpath}/workspace

##################################
##	Config Eclipse workspace
##################################
# Called upon finish
function config {
	echo "${ECHOPREFIX}"
	echo "${ECHOPREFIX} CONFIGURATION "
	echo "${ECHOPREFIX}"

	mkdir -p ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.runtime/.settings/
	
	TMPCONFFILE=$(mktemp tmp_XXXXXXX_eclipse.ini)
	mkdir -p ${HOMEDIR}/.eclipse
	#set master password
	echo "secretrandomsuperpoweredpasswordofthemegadeath" > ${HOMEDIR}/.eclipse/master
	echo -e "-eclipse.password\n${HOMEDIR}/.eclipse/master" > ${TMPCONFFILE}
	#Fix eclipse.ini : force GTK2
	if [ "$ECLIPSE_PLATFORM" == "linux-gtk" ]; then
		echo -e "--launcher.GTK_version\n2" >> ${TMPCONFFILE}
	fi
	cat ${installationpath}/${ECLIPSE_INIT_FOLDER}/eclipse.ini | \
		sed -r 's/-Xms(.*)m/-Xms1024m/g' | \
		sed -r 's/-Xmx(.*)m/-Xmx4096m/g' \
			>> ${TMPCONFFILE}
	cat ${TMPCONFFILE} > ${installationpath}/${ECLIPSE_INIT_FOLDER}/eclipse.ini
	rm ${TMPCONFFILE}

	#initialize configuration
	TMPCONFFILE=$(mktemp tmp_XXXXXXX_config.ini)
	echo "${ECHOPREFIX} init config (${installationpath}/${ECLIPSE_INIT_FOLDER}/configuration/config.ini)"
	echo "$TMPCONFFILE"
	cat ${installationpath}/${ECLIPSE_INIT_FOLDER}/configuration/config.ini | grep -v "osgi.instance.area.default" > $TMPCONFFILE
	cat $TMPCONFFILE > ${installationpath}/${ECLIPSE_INIT_FOLDER}/configuration/config.ini
	cat >> ${installationpath}/${ECLIPSE_INIT_FOLDER}/configuration/config.ini << EOF
osgi.instance.area.default=${WORKSPACE_PATH}
EOF
	rm $TMPCONFFILE
	
	#Config skip workspace selection
	mkdir -p ${installationpath}/${ECLIPSE_INIT_FOLDER}/configuration/.settings/
	cat > ${installationpath}/${ECLIPSE_INIT_FOLDER}/configuration/.settings/org.eclipse.ui.ide.prefs << "EOF"
SHOW_WORKSPACE_SELECTION_DIALOG=false
eclipse.preferences.version=1
EOF

	#Always exit without prompt
	cat > ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.ide.prefs << "EOF"
EXIT_PROMPT_ON_CLOSE_LAST_WINDOW=false
REFRESH_WORKSPACE_ON_STARTUP=true
eclipse.preferences.version=1
EOF

	echo "${ECHOPREFIX} Basic config done"

	echo "${ECHOPREFIX} Generate cleanup script"
	CLEANUP_SCRIPT=${installationpath}/cleanup.sh
	cat > ${CLEANUP_SCRIPT} << 'EOF'
#!/bin/bash

SCRIPT_DIR=`dirname $0`
SCRIPT_DIR=`(cd ${SCRIPT_DIR} && echo $PWD)`
SCRIPT_NAME=`basename $0`

ECLIPSE_PATH=${SCRIPT_DIR}/eclipse
ECLIPSE_BIN=${ECLIPSE_PATH}/eclipse

WORKSPACE_PATH=${SCRIPT_DIR}/workspace/

PID=`ps -df | grep -v grep | grep /home/koubi/IDE/eclipse/eclipse | xargs | cut -d" " -f 2`

if [ "$PID" != "" ]; then
	echo ""
	echo " ** Eclipse is found running (pid = $PID). Killing it."
	echo ""
	kill -9 $PID
fi


rm -f ${WORKSPACE_PATH}/.metadata/.lock
rm -f ${WORKSPACE_PATH}/.metadata/.log
rm -f ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.resources/.span

if [ -d ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.resources ]; then
	mv ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.resources ${SCRIPT_DIR}/resources_bk

	echo ""
	echo " ** Eclipse will start. Close all tabs then close eclipse"
	echo ""
	read -p "[Press Enter] ..."

	${ECLIPSE_BIN}

	rm -rf ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.resources
	mv ${SCRIPT_DIR}/resources_bk ${WORKSPACE_PATH}/.metadata/.plugins/org.eclipse.core.resources
fi

echo ""
echo " ** Cleanup done."
echo ""

exit 0

EOF
	chmod +x ${CLEANUP_SCRIPT}

	#Config Xtend compiler
	echo "${ECHOPREFIX}   o Config XTend"
	cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.xtend.core.Xtend.prefs << EOF
eclipse.preferences.version=1
outlet.DEFAULT_OUTPUT.cleanupDerived=false
outlet.DEFAULT_OUTPUT.derived=false
EOF

	if [ "$DARKTHEME" == "YES" ]; then
		echo "${ECHOPREFIX}   o Config DarkTheme"
		cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.css.swt.theme.prefs << EOF
themeid=org.eclipse.e4.ui.css.theme.high-contrast
EOF

		#config theme dark
		cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.css.swt.theme << EOF
	themeid=org.eclipse.e4.ui.css.theme.high-contrast
EOF

		#config tm terminal
		cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.tm.terminal.control.prefs << EOF
TerminalPrefInvertColors=true
EOF
	fi

	if [ "$SETUP_SVN" == "YES" ]; then
		#Config SVN Console output
		echo "${ECHOPREFIX}   o Config SVN"
		cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.team.svn.ui.prefs << "EOF"
eclipse.preferences.version=1
preference.console.autoshow=1
preference.console.limitEnabled=false
EOF

		#Force SVN Decorators in worksapce
		cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.workbench.prefs << "EOF"
eclipse.preferences.version=1
ENABLED_DECORATORS=org.eclipse.team.svn.ui.decorator.SVNLightweightDecorator\:true,
EOF
	fi

	#skip wizard tab on startup
	echo "${ECHOPREFIX}   o Disable wizard tab"
	mkdir -p ${installationpath}/workspace/.metadata/.plugins/org.eclipse.ui.intro/
	cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.ui.intro/introstate << "EOF"
<?xml version="1.0" encoding="UTF-8"?>
<state reopen="false"/>
EOF

	if [ "$SETUP_EASYSHELL" == "YES" ]; then
		#Config Easyshell terminal & explorer
		echo "${ECHOPREFIX}   o Config EasyShell"
		cat > ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs << EOF
IdStr=cmdUnknown
eclipse.preferences.version=1
listPreference=-1
targetRunPreference=cd {1} && run ./''{3}''
EOF
		TERMS="terminator xfce4-terminal gnome-terminal konsole urxvtc"
		for term in ${TERMS}; do
			if [ ! -z `which ${term}` -a -x `which ${term}` ];
			then
				case ${term} in
					terminator)
						echo "${ECHOPREFIX}     - Terminator"
						echo "targetPreference=terminator --working-directory\\={1}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					xfce4-terminal)
						echo "${ECHOPREFIX}     - XFCE"
						echo "targetPreference=xfce4-terminal --default-working-directory\\={1}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					gnome-terminal)
						echo "${ECHOPREFIX}     - Gnome"
						echo "targetPreference=gnome-terminal --working-directory\\={1}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					konsole)
						echo "${ECHOPREFIX}     - Konsole"
						echo "targetPreference=konsole --workdir {1}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					urxvtc)
						echo "${ECHOPREFIX}     - urxvtc"
						echo "targetPreference=urxvtc -cd  {1}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					*)
						echo "unknown terminal ${term}"
						;;
				esac
				break
			fi
		done
		NAVS="thunar nautilus konqueror firefox"
		for nav in ${NAVS}; do
			if [ ! -z `which ${nav}` -a -x `which ${nav}` ];
			then
				case ${nav} in
					thunar)
						echo "${ECHOPREFIX}     - Thunar"
						echo "targetExplorePreference=thunar {2}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					nautilus)
						echo "${ECHOPREFIX}     - Nautilus"
						echo "targetExplorePreference=nautilus {2}" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					konqueror)
						echo "${ECHOPREFIX}     - Konqueror"
						echo "targetExplorePreference=konqueror file:\"{2}\"" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					firefox)
						echo "${ECHOPREFIX}     - Firefox"
						echo "targetExplorePreference=firefox file:\"{2}\"" >> ${installationpath}/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/com.tetrade.eclipse.plugins.easyshell.prefs
						;;
					*)
						echo "unknown file explorer ${nav}"
						;;
				esac
				break
			fi
		done
	fi
	echo "${ECHOPREFIX}"
	echo "${ECHOPREFIX} CONFIGURATION Done. "
	echo "${ECHOPREFIX}"
}

##################################
##	Setup Eclipse plug-ins
##################################

ECLIPSE_PLUGINS_INSTALL_PATH=${installationpath}/${ECLIPSE_INIT_FOLDER}
ECLIPSE_OPTIONS="-nosplash -consolelog -clean -purgeHistory"
P2OPTIONS="-followReferences"
ECLIPSE="${installationpath}/${ECLIPSE_BIN_FOLDER}/eclipse${ECLIPSE_BIN_EXTENSTION} ${ECLIPSE_OPTIONS}"
P2APP="${ECLIPSE} -application org.eclipse.equinox.p2.director"

SETUP_RESULT_TMPFILE=`mktemp setup_result_tmpfile_XXXXXXXXXXXXXX.txt`
rm -f $SETUP_RESULT_TMPFILE
function setup_eclipse_plugins {
	TITLE=$1
	echo "${ECHOPREFIX}   * Installing '$TITLE' plugins"
	DESTFOLDER=$2
	REPOS=$3
	shift
	shift
	shift
	echo "${ECHOPREFIX}      - P2 Repository  : $REPOS"
	echo "${ECHOPREFIX}      - Eclipse folder : $DESTFOLDER"
	echo "${ECHOPREFIX}      - Features       : " #multiline echo
	FEATURES=
	while [ $# -ge 1 ]; do
		if [ "$FEATURES" != "" ]; then
			FEATURES+=" "
		fi
		FEATURE="-installIU $1"
		FEATURES+=`echo $FEATURE | sed 's/-installIU %U/-uninstallIU /g'`
		echo "${ECHOPREFIX}                         - $1"
		shift
	done
	echo "${ECHOPREFIX}    Launching ..."
	echo ""
	echo "${P2APP} \
		-repository ${REPOS} \
		-destination ${DESTFOLDER} \
		${P2OPTIONS} \
		${FEATURES}" | xargs
	echo ""
  set +e
	${P2APP} \
		-repository ${REPOS} \
		-destination ${DESTFOLDER} \
		${P2OPTIONS} \
		${FEATURES}
	SETUP_RESULT=$?
  set -e
	echo ""
	echo "${ECHOPREFIX}   - Setup $TITLE : $SETUP_RESULT" >> $SETUP_RESULT_TMPFILE
	echo "${ECHOPREFIX}    $TITLE Setup done : $SETUP_RESULT"
	echo "${ECHOPREFIX}"
}

function finish {
	config
	echo "${ECHOPREFIX}"
	echo "${ECHOPREFIX} Install results : "
	cat $SETUP_RESULT_TMPFILE
	echo "${ECHOPREFIX}"
	rm $SETUP_RESULT_TMPFILE
	exit
}

echo "${ECHOPREFIX}  * Call Setup function"
setup_eclipse_plugins \
	"ALL" \
	${ECLIPSE_PLUGINS_INSTALL_PATH} \
	${MIRRORURL}/eclipse/updates/${ECLIPSE_VERSION_MAJOR}.${ECLIPSE_VERSION_MIDDLE},http://eclipse-color-theme.github.io/update/,${MIRRORURL}/releases/${ECLIPSE_VERSION},http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-tycho/0.9.0/N/LATEST/,http://community.polarion.com/projects/subversive/download/eclipse/6.0/update-site/,http://anb0s.github.io/EasyShell,http://update.eclemma.org/,http://andrei.gmxhome.de/eclipse/,http://findbugs.cs.umd.edu/eclipse/,http://download.eclipse.org/efxclipse/updates-released/2.4.0/site,https://dl.bintray.com/eclipse-cs/eclipse-cs/8.10.0/,http://eclipse.sonarlint.org/,${MIRRORURL}/modeling/tmf/xtext/updates/releases/,${MIRRORURL}/buildship/updates/e47/releases/,http://download.eclipse.org/technology/subversive/4.0/update-site/ \
	org.eclipse.releng.tools.feature.group \
	com.github.eclipsecolortheme.feature.feature.group \
	org.eclipse.cdt.feature.group \
	org.eclipse.cdt.platform.feature.group \
	org.eclipse.cdt.gnu.dsf.feature.group \
	org.eclipse.cdt.gnu.build.feature.group \
	org.eclipse.cdt.gnu.debug.feature.group \
	org.eclipse.cdt.gdb.feature.group \
	org.eclipse.cdt.debug.standalone.feature.group \
	org.eclipse.wst.xsl.feature.feature.group \
	org.eclipse.wst.xml_ui.feature.feature.group \
	org.eclipse.wst.web_ui.feature.feature.group \
	org.eclipse.tm.terminal.feature.feature.group \
	org.eclipse.linuxtools.changelog.feature.group \
	org.eclipse.dltk.itcl.feature.group \
	org.eclipse.dltk.ruby.feature.group \
	org.eclipse.dltk.sh.feature.group \
	org.eclipse.egit.feature.group \
	org.eclipse.egit.gitflow.feature.feature.group \
	org.eclipse.team.svn.feature.group \
	org.polarion.eclipse.team.svn.connector.feature.group \
  org.polarion.eclipse.team.svn.connector.svnkit18.feature.group \
	org.eclipse.emf.mwe2.runtime.sdk.feature.group \
	org.eclipse.emf.sdk.feature.group \
	org.eclipse.xtend.sdk.feature.group \
	org.eclipse.xtext.sdk.feature.group \
	org.eclipse.m2e.feature.feature.group \
	org.sonatype.tycho.m2e.feature.feature.group \
	org.eclipse.buildship.feature.group \
	de.anbos.eclipse.easyshell.feature.feature.group \
	org.eclipse.eclemma.feature.feature.group \
	AnyEditTools.feature.group \
	edu.umd.cs.findbugs.plugin.eclipse.feature.group \
	org.eclipse.fx.ide.feature.feature.group \
	net.sf.eclipsecs.feature.group \
	org.eclipse.gef.sdk.feature.group \
	org.eclipse.graphiti.sdk.plus.feature.feature.group \
	org.sonarlint.eclipse.feature.feature.group \
	org.eclipse.sdk.ide \
	org.eclipse.platform.sdk
  
	#org.eclipse.jst.web_ui.feature.feature.group 
	#org.eclipse.jpt.jpa.feature.feature.group 
	#org.eclipse.jpt.jpadiagrameditor.feature.feature.group 
	#org.eclipse.jpt.jaxb.feature.feature.group 
  

setup_eclipse_plugins \
	"graphiti Dev Feature" \
	${ECLIPSE_PLUGINS_INSTALL_PATH} \
	http://preesm.insa-rennes.fr/repo/complete/ \
	org.ietr.graphiti.dev.feature.feature.group

echo "${ECHOPREFIX}  * Setup function done"
finish
echo "${ECHOPREFIX} Done"
exit


#

setup_eclipse_plugins \
	"cdt, xml, web, m2e, ..." \
	${ECLIPSE_PLUGINS_INSTALL_PATH} \
	http://download.eclipse.org/releases/${ECLIPSE_VERSION} \
	org.eclipse.cdt.feature.group \
	org.eclipse.cdt.platform.feature.group \
	org.eclipse.cdt.gnu.dsf.feature.group \
	org.eclipse.cdt.gnu.build.feature.group \
	org.eclipse.cdt.gnu.debug.feature.group \
	org.eclipse.cdt.gdb.feature.group \
	org.eclipse.cdt.debug.standalone.feature.group \
	org.eclipse.jst.web_ui.feature.feature.group \
	org.eclipse.jpt.jpa.feature.feature.group \
	org.eclipse.jpt.jpadiagrameditor.feature.feature.group \
	org.eclipse.wst.xsl.feature.feature.group \
	org.eclipse.wst.xml_ui.feature.feature.group \
	org.eclipse.wst.web_ui.feature.feature.group \
	org.eclipse.m2e.feature.feature.group \
	org.sonatype.m2e.mavenarchiver.feature.feature.group \
	org.eclipse.m2e.wtp.feature.feature.group \
	org.eclipse.jpt.jaxb.feature.feature.group \
	org.eclipse.tm.terminal.feature.feature.group \
	org.eclipse.stardust.modeling.wst-feature.feature.group \
	org.eclipse.linuxtools.changelog.feature.group \
	org.eclipse.egit.feature.group \
	org.eclipse.egit.gitflow.feature.feature.group

exit
echo ""
echo " * setup from ${ECLIPSE_VERSION} repo (cdt, xml, web, m2e, ...)"
echo ""
${ECLIPSE} ${OPTIONS} \
  -application org.eclipse.equinox.p2.director \
  -repository http://download.eclipse.org/releases/${ECLIPSE_VERSION} \
  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
  -installIU org.eclipse.cdt.feature.group \
  -installIU org.eclipse.cdt.platform.feature.group \
  -installIU org.eclipse.cdt.gnu.dsf.feature.group \
  -installIU org.eclipse.cdt.gnu.build.feature.group \
  -installIU org.eclipse.cdt.gnu.debug.feature.group \
  -installIU org.eclipse.cdt.gdb.feature.group \
  -installIU org.eclipse.cdt.debug.standalone.feature.group \
  -installIU org.eclipse.jst.web_ui.feature.feature.group \
  -installIU org.eclipse.jpt.jpa.feature.feature.group \
  -installIU org.eclipse.jpt.jpadiagrameditor.feature.feature.group \
  -installIU org.eclipse.wst.xsl.feature.feature.group \
  -installIU org.eclipse.wst.xml_ui.feature.feature.group \
  -installIU org.eclipse.wst.web_ui.feature.feature.group \
  -installIU org.eclipse.m2e.feature.feature.group \
  -installIU org.sonatype.m2e.mavenarchiver.feature.feature.group \
  -installIU org.eclipse.m2e.wtp.feature.feature.group \
  -installIU org.eclipse.jpt.jaxb.feature.feature.group \
  -installIU org.eclipse.tm.terminal.feature.feature.group \
  -installIU org.eclipse.stardust.modeling.wst-feature.feature.group \
  -installIU org.eclipse.linuxtools.changelog.feature.group \
  -uninstallIU org.eclipse.egit.feature.group \
  -installIU org.eclipse.egit.feature.group \
  -installIU org.eclipse.egit.gitflow.feature.feature.group
  
BASE_RESULT=$?

echo ""
echo " * Setup Xtet/Xtend/Mwe/Ecore"
echo ""
${ECLIPSE} ${OPTIONS} \
  -application org.eclipse.equinox.p2.director \
  -repository http://download.eclipse.org/releases/${ECLIPSE_VERSION} \
  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
  -installIU org.eclipse.emf.mwe2.runtime.sdk.feature.group \
  -installIU org.eclipse.xtend.sdk.feature.group \
  -installIU org.eclipse.xtext.sdk.feature.group
TMF_RESULT=$?


echo ""
echo " * Setup Tycho"
echo ""
${ECLIPSE} ${OPTIONS} \
  -application org.eclipse.equinox.p2.director \
  -repository http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-tycho/0.8.0/N/0.8.0.201409231215/ \
  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
  -installIU org.sonatype.tycho.m2e.feature.feature.group
TYCHO_RESULT=$?


echo ""
echo " * Setup Releng Tools"
echo ""
${ECLIPSE} ${OPTIONS} \
  -application org.eclipse.equinox.p2.director \
  -repository http://download.eclipse.org/eclipse/updates/${ECLIPSE_VERSION_MAJOR}.${ECLIPSE_VERSION_MIDDLE} \
  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
  -installIU org.eclipse.releng.tools.feature.group
RELENG_RESULT=$?



if [ "$SETUP_DLTK" == "YES" ]; then
	echo ""
	echo " * setup Dynamic Language ToolKit"
	echo ""
	
	
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/releases/${ECLIPSE_VERSION} \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.dltk.itcl.feature.group \
	  -installIU org.eclipse.dltk.ruby.feature.group \
	  -installIU org.eclipse.dltk.sh.feature.group
	DLTK_RESULT=$?
fi


if [ "$SETUP_GRADLE" == "YES" ]; then
	echo ""
	echo " * setup Gradle (buildship)"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/buildship/updates/e46/releases/1.0 \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.buildship.feature.group
	GRADLE_RESULT=$?
	
fi

if [ "$SETUP_SVN" == "YES" ]; then
	echo ""
	echo " * setup svn"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/releases/${ECLIPSE_VERSION} \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.team.svn.feature.group
	SVN_RESULT=$?
	
	echo ""
	echo " * Setup subversive"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://community.polarion.com/projects/subversive/download/eclipse/6.0/${ECLIPSE_VERSION}-site/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.polarion.eclipse.team.svn.connector.feature.group \
	  -installIU org.polarion.eclipse.team.svn.connector.svnkit18.feature.group
	SUBVERSIVE_RESULT=$?
fi

if [ "$SETUP_EASYSHELL" == "YES" ]; then
	echo ""
	echo " * Setup easyshell"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://anb0s.github.io/EasyShell \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU de.anbos.eclipse.easyshell.feature.feature.group
	EASYSHELL_RESULT=$?
fi

if [ "$SETUP_TEXCLIPSE" == "YES" ]; then
	echo ""
	echo " * Setup texclipse"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://texlipse.sourceforge.net \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU net.sourceforge.texlipse.feature.group
	TEXCLIPSE_RESULT=$?
fi

if [ "$SETUP_CUP_LEX" == "YES" ]; then
	echo ""
	echo " * Setup cup/lex"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://cup-lex-eclipse.sourceforge.net/update/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU pi.eclipse.cle.feature.group
	CUP_LEX_RESULT=$?
fi

if [ "$SETUP_TOM" == "YES" ]; then
	echo ""
	echo " * Setup TOM"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://gecos.gforge.inria.fr/updates/mars/snapshot/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU cairn.tools.tom.dev.feature.group
	TOM_RESULT=$?
fi

if [ "$SETUP_JNIMAP" == "YES" ]; then
	echo ""
	echo " * Setup jnimap"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://gecos.gforge.inria.fr/updates/mars/snapshot/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU cairn.tools.jni.mapper.feature.group
	JNIMAP_RESULT=$?
fi

if [ "$SETUP_GECOS_SCRIPT" == "YES" ]; then
	echo ""
	echo " * Setup gecos scripts"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://gecos.gforge.inria.fr/updates/mars/snapshot/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU gecos.framework.feature.group
	GECOS_SCRIPT_RESULT=$?
fi

if [ "$SETUP_GECOS_UI" == "YES" ]; then
	echo ""
	echo " * Setup gecos UI"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://gecos.gforge.inria.fr/updates/mars/snapshot/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU gecos.ui.feature.group \
	  -installIU gecos.alma.feature.group
	GECOS_UI_RESULT=$?
fi

if [ "$SETUP_GRECLIPSE" == "YES" ]; then
	echo ""
	echo " * Setup greclipse (groovy)"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://dist.springsource.org/snapshot/GRECLIPSE/e4.5/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.codehaus.groovy.eclipse.feature.feature.group \
	  -installIU org.codehaus.groovy.m2eclipse.feature.feature.group \
	  -installIU org.codehaus.groovy.jdt.patch.feature.group \
	  -installIU org.codehaus.groovy24.feature.feature.group
	GRECLIPSE_RESULT=$?
fi

if [ "$SETUP_ECLEMMAJCC" == "YES" ]; then
	echo ""
	echo " * Setup eclemmajcc (code coverage)"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://update.eclemma.org/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU com.mountainminds.eclemma.feature.feature.group
	ECLEMMAJCC_RESULT=$?
fi

if [ "$SETUP_JAUTODOC" == "YES" ]; then
	echo ""
	echo " * Setup JAutodoc"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://jautodoc.sourceforge.net/update/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU net.sf.jautodoc.feature.feature.group
	JAUTODOC_RESULT=$?
fi

if [ "$SETUP_ANYEDITTOOLS" == "YES" ]; then
	echo ""
	echo " * Setup anyedit tools"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://andrei.gmxhome.de/eclipse/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU AnyEditTools.feature.group
	ANYEDITTOOLS_RESULT=$?
fi

# original repo : http://findbugs.cs.umd.edu/eclipse/
# latest version here : http://andrei.gmxhome.de/eclipse/
if [ "$SETUP_FINDBUGS" == "YES" ]; then
	echo ""
	echo " * Setup findbugs"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://andrei.gmxhome.de/eclipse/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU edu.umd.cs.findbugs.plugin.eclipse.feature.group
	FINDBUGS_RESULT=$?
fi

if [ "$SETUP_TOMCAT" == "YES" ]; then
	echo ""
	echo " * Setup Tocmat"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository https://sourceforge.net/projects/tomcatplugin/files/updatesite/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU net.sf.eclipse.tomcat.feature.feature.group
	TOMCAT_RESULT=$?
fi

if [ "$SETUP_PTP" == "YES" ]; then
	echo ""
	echo " * Setup Parallel Tools"
	echo ""
	
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/releases/${ECLIPSE_VERSION} \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.cdt.bupc.feature.group \
	  -installIU org.eclipse.cdt.core.parser.upc.feature.feature.group \
	  -installIU org.eclipse.cdt.core.parser.upc.sdk.feature.group \
	  -installIU org.eclipse.ptp.rdt.sync.cdt.feature.group \
	  -installIU org.eclipse.cdt.core.parser.upc.source.feature.group \
	  -installIU org.eclipse.tm.terminal.connector.remote.feature.feature.group
	PTP_PRE_RESULT=$?
	  
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/tools/ptp/updates/${ECLIPSE_VERSION}/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.ptp.feature.group \
	  -installIU org.eclipse.ptp.sdk.feature.group \
	  -installIU org.eclipse.ptp.rm.jaxb.contrib.feature.group \
	  -installIU org.eclipse.ptp.etfw.feedback.perfsuite.feature.group \
	  -installIU org.eclipse.ptp.etfw.tau.feature.group \
	  -installIU org.eclipse.ptp.etfw.tau.fortran.feature.group \
	  -installIU org.eclipse.ptp.fortran.feature.group \
	  -installIU org.eclipse.ptp.gem.feature.group \
	  -installIU org.eclipse.ptp.pldt.fortran.feature.group \
	  -installIU org.eclipse.ptp.pldt.upc.feature.group \
	  -installIU org.eclipse.ptp.sci.feature.group \
	  -installIU org.eclipse.ptp.debug.sdm.feature.group
	PTP_RESULT=$?
fi

if [ "$SETUP_PHOTRAN" == "YES" ]; then
	echo ""
	echo " * Setup Photran (from PTP)"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/tools/ptp/updates/${ECLIPSE_VERSION}/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.photran.feature.group \
	  -installIU org.eclipse.photran.xlf.feature.group \
	  -installIU org.eclipse.photran.intel.feature.group
	  #-installIU org.eclipse.ptp.rdt.sync.fortran.feature.group
	PHOTRAN_RESULT=$?
fi

if [ "$SETUP_WTP" == "YES" ]; then
	echo ""
	echo " * Setup WTP"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/webtools/repository/${ECLIPSE_VERSION}/ \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.jst.ws.cxf.feature.feature.group \
	  -installIU org.eclipse.jpt.common.eclipselink.feature.feature.group \
	  -installIU org.eclipse.jpt.dbws.eclipselink.feature.feature.group \
	  -installIU org.eclipse.jpt.jaxb.eclipselink.feature.feature.group \
	  -installIU org.eclipse.jpt.jpa.eclipselink.feature.feature.group \
	  -installIU org.eclipse.jst.ws.jaxws.dom.feature.feature.group \
	  -installIU org.eclipse.jst.ws.jaxws.feature.feature.group \
	  -installIU org.eclipse.jsf.feature.feature.group \
	  -installIU org.eclipse.jst.jsf.apache.trinidad.tagsupport.feature.feature.group \
	  -installIU org.eclipse.jst.webpageeditor.feature.feature.group \
	  -installIU org.eclipse.jst.server_adapters.feature.feature.group \
	  -installIU org.eclipse.jst.server_adapters.ext.feature.feature.group \
	  -installIU org.eclipse.jst.server_ui.feature.feature.group \
	  -installIU org.eclipse.wst.server_adapters.feature.feature.group
	WTP_RESULT=$?
fi

if [ "$SETUP_JAVAFX" == "YES" ]; then
	echo ""
	echo " * Setup JavaFX"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/efxclipse/updates-released/2.4.0/site \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.fx.ide.feature.feature.group
	JAVAFX_RESULT=$?
fi

if [ "$SETUP_EASE" == "YES" ]; then
	echo ""
	echo " * Setup EASE"
	echo ""
	${ECLIPSE} ${OPTIONS} \
	  -application org.eclipse.equinox.p2.director \
	  -repository http://download.eclipse.org/ease/update/release \
	  ${P2OPTIONS} -destination ${installationpath}/eclipse/ \
	  -installIU org.eclipse.ease.modules.charting.feature.feature.group \
	  -installIU org.eclipse.ease.modules.team.git.feature.feature.group \
	  -installIU org.eclipse.ease.lang.javascript.feature.feature.group \
	  -installIU org.eclipse.ease.lang.jvm.feature.feature.group \
	  -installIU org.eclipse.ease.python.jython.feature.feature.group \
	  -installIU org.eclipse.ease.modules.modeling.feature.feature.group \
	  -installIU org.eclipse.ease.modules.feature.feature.group \
	  -installIU org.eclipse.ease.lang.python.feature.feature.group \
	  -installIU org.eclipse.ease.lang.python.py4j.feature.feature.group \
	  -installIU org.eclipse.ease.modules.unittest.feature.feature.group \
	  -installIU org.eclipse.ease.lang.groovy.feature.feature.group \
	  -installIU org.eclipse.ease.lang.ruby.feature.feature.group
	EASE_RESULT=$?
fi




exit
